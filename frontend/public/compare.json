{
  "name": "compare",
  "type": "registry:ui",
  "dependencies": [
    "@vueuse/core"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "ui/compare/Compare.vue",
      "content": "<template>\n  <div\n    ref=\"sliderRef\"\n    :class=\"cn('w-[400px] h-[400px] overflow-hidden', props.class)\"\n    :style=\"{\n      position: 'relative',\n      cursor: props.slideMode === 'drag' ? 'grab' : 'col-resize',\n    }\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"mouseLeaveHandler\"\n    @mouseenter=\"mouseEnterHandler\"\n    @mousedown=\"handleMouseDown\"\n    @mouseup=\"handleEnd\"\n    @touchstart=\"handleTouchStart\"\n    @touchend=\"handleTouchEnd\"\n    @touchmove=\"handleTouchMove\"\n  >\n    <!-- Slider Line -->\n    <Transition>\n      <div\n        v-show=\"true\"\n        class=\"absolute top-0 z-30 m-auto h-full w-px bg-gradient-to-b from-transparent from-5% via-indigo-500 to-transparent to-95%\"\n        :style=\"{\n          left: `${sliderXPercent}%`,\n          top: '0',\n          zIndex: 40,\n          pointerEvents: 'none',\n        }\"\n      >\n        <!-- Decorative Effects -->\n        <div\n          class=\"absolute left-0 top-1/2 z-20 h-full w-36 -translate-y-1/2 bg-gradient-to-r from-indigo-400 via-transparent to-transparent opacity-50 [mask-image:radial-gradient(100px_at_left,white,transparent)]\"\n        />\n        <div\n          class=\"absolute left-0 top-1/2 z-10 h-1/2 w-10 -translate-y-1/2 bg-gradient-to-r from-cyan-400 via-transparent to-transparent opacity-100 [mask-image:radial-gradient(50px_at_left,white,transparent)]\"\n        />\n        <div\n          class=\"absolute -right-10 top-1/2 h-3/4 w-10 -translate-y-1/2 [mask-image:radial-gradient(100px_at_left,white,transparent)]\"\n        >\n          <StarField\n            :stars-count=\"120\"\n            class=\"size-full\"\n          />\n        </div>\n\n        <!-- Custom Handle Slot -->\n        <slot name=\"handle\">\n          <div\n            v-if=\"props.showHandlebar\"\n            class=\"pointer-events-auto absolute -right-2.5 top-1/2 z-30 flex size-5 -translate-y-1/2 cursor-grab items-center justify-center rounded-md bg-white shadow-[0px_-1px_0px_0px_#FFFFFF40]\"\n          >\n            <Icon\n              name=\"heroicons:ellipsis-vertical\"\n              class=\"size-4 text-black\"\n            />\n          </div>\n        </slot>\n      </div>\n    </Transition>\n\n    <!-- First Content -->\n    <div\n      class=\"relative z-20 size-full overflow-hidden\"\n      :style=\"{ pointerEvents: isInteracting ? 'none' : 'auto' }\"\n    >\n      <Transition>\n        <div\n          v-show=\"true\"\n          :class=\"\n            cn(\n              'absolute inset-0 z-20 rounded-2xl flex-shrink-0 w-full h-full select-none overflow-hidden',\n              props.firstContentClass,\n            )\n          \"\n          :style=\"{\n            clipPath: `inset(0 ${100 - sliderXPercent}% 0 0)`,\n          }\"\n        >\n          <slot name=\"first-content\">\n            <img\n              v-if=\"props.firstImage\"\n              :alt=\"props.firstImageAlt\"\n              :src=\"props.firstImage\"\n              :class=\"\n                cn(\n                  'absolute inset-0 z-20 rounded-2xl flex-shrink-0 w-full h-full select-none',\n                  firstContentClass,\n                )\n              \"\n              :draggable=\"false\"\n            />\n          </slot>\n        </div>\n      </Transition>\n    </div>\n\n    <!-- Second Content -->\n    <Transition>\n      <div\n        v-show=\"true\"\n        :class=\"\n          cn(\n            'absolute top-0 left-0 z-[19] rounded-2xl w-full h-full select-none',\n            props.secondContentClass,\n          )\n        \"\n        :style=\"{ pointerEvents: isInteracting ? 'none' : 'auto' }\"\n      >\n        <slot name=\"second-content\">\n          <img\n            v-if=\"props.secondImage\"\n            :alt=\"props.secondImageAlt\"\n            :src=\"props.secondImage\"\n            :class=\"cn('w-full h-full object-cover', secondContentClass)\"\n            :draggable=\"false\"\n          />\n        </slot>\n      </div>\n    </Transition>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { ref, onMounted, onUnmounted, watch } from \"vue\";\nimport { templateRef } from \"@vueuse/core\";\n\ninterface Props {\n  firstImage?: string;\n  secondImage?: string;\n  firstImageAlt?: string;\n  secondImageAlt?: string;\n  class?: string;\n  firstContentClass?: string;\n  secondContentClass?: string;\n  initialSliderPercentage?: number;\n  slideMode?: \"hover\" | \"drag\";\n  showHandlebar?: boolean;\n  autoplay?: boolean;\n  autoplayDuration?: number;\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  firstImage: \"\",\n  secondImage: \"\",\n  firstImageAlt: \"First image\",\n  secondImageAlt: \"Second image\",\n  class: \"\",\n  firstContentClass: \"\",\n  secondContentClass: \"\",\n  initialSliderPercentage: 50,\n  slideMode: \"hover\",\n  showHandlebar: true,\n  autoplay: false,\n  autoplayDuration: 5000,\n});\n\nconst emit = defineEmits<{\n  (e: \"update:percentage\", value: number): void;\n  (e: \"drag:start\"): void;\n  (e: \"drag:end\"): void;\n  (e: \"hover:enter\"): void;\n  (e: \"hover:leave\"): void;\n}>();\n\nconst sliderRef = templateRef<HTMLDivElement | null>(\"sliderRef\");\nconst sliderXPercent = ref(props.initialSliderPercentage);\nconst isDragging = ref(false);\nconst isMouseOver = ref(false);\nconst isInteracting = ref(false);\nlet autoplayTimeout: ReturnType<typeof setTimeout> | null = null;\nlet autoplayRAF: number | null = null;\n\nfunction startAutoplay(): void {\n  if (!props.autoplay || isMouseOver.value || isDragging.value) return;\n\n  const startTime = Date.now();\n  function animate(): void {\n    if (isMouseOver.value || isDragging.value) {\n      if (autoplayRAF) cancelAnimationFrame(autoplayRAF);\n      return;\n    }\n\n    const elapsedTime = Date.now() - startTime;\n    const progress = (elapsedTime % (props.autoplayDuration * 2)) / props.autoplayDuration;\n    const percentage = progress <= 1 ? progress * 100 : (2 - progress) * 100;\n\n    sliderXPercent.value = percentage;\n    emit(\"update:percentage\", percentage);\n    autoplayRAF = requestAnimationFrame(animate);\n  }\n\n  animate();\n}\n\nfunction stopAutoplay(): void {\n  if (autoplayTimeout) {\n    clearTimeout(autoplayTimeout);\n    autoplayTimeout = null;\n  }\n  if (autoplayRAF) {\n    cancelAnimationFrame(autoplayRAF);\n    autoplayRAF = null;\n  }\n}\n\nfunction mouseEnterHandler(): void {\n  isMouseOver.value = true;\n  emit(\"hover:enter\");\n  if (props.autoplay) {\n    stopAutoplay();\n  }\n}\n\nfunction mouseLeaveHandler(): void {\n  isMouseOver.value = false;\n  isInteracting.value = false;\n  emit(\"hover:leave\");\n\n  if (props.slideMode === \"hover\") {\n    sliderXPercent.value = props.initialSliderPercentage;\n    emit(\"update:percentage\", props.initialSliderPercentage);\n  }\n  if (props.slideMode === \"drag\") {\n    isDragging.value = false;\n  }\n\n  if (props.autoplay) {\n    startAutoplay();\n  }\n}\n\nfunction handleStart(): void {\n  if (props.slideMode === \"drag\") {\n    isDragging.value = true;\n    isInteracting.value = true;\n    emit(\"drag:start\");\n    stopAutoplay();\n  }\n}\n\nfunction handleEnd(): void {\n  if (props.slideMode === \"drag\") {\n    isDragging.value = false;\n    isInteracting.value = false;\n    emit(\"drag:end\");\n    if (props.autoplay && !isMouseOver.value) {\n      startAutoplay();\n    }\n  }\n}\n\nfunction handleMove(clientX: number): void {\n  if (!sliderRef.value) return;\n\n  if (props.slideMode === \"hover\" || (props.slideMode === \"drag\" && isDragging.value)) {\n    isInteracting.value = true;\n    stopAutoplay();\n\n    const rect = sliderRef.value.getBoundingClientRect();\n    const x = clientX - rect.left;\n    const percent = (x / rect.width) * 100;\n\n    requestAnimationFrame(() => {\n      const newPercent = Math.max(0, Math.min(100, percent));\n      sliderXPercent.value = newPercent;\n      emit(\"update:percentage\", newPercent);\n    });\n  }\n}\n\nfunction handleMouseDown(e: MouseEvent): void {\n  handleStart();\n}\n\nfunction handleMouseMove(e: MouseEvent): void {\n  handleMove(e.clientX);\n}\n\nfunction handleTouchStart(e: TouchEvent): void {\n  if (!props.autoplay) handleStart();\n}\n\nfunction handleTouchEnd(): void {\n  if (!props.autoplay) handleEnd();\n}\n\nfunction handleTouchMove(e: TouchEvent): void {\n  if (!props.autoplay) handleMove(e.touches[0].clientX);\n}\n\nonMounted(() => {\n  startAutoplay();\n});\n\nonUnmounted(() => {\n  stopAutoplay();\n});\n\nwatch(\n  () => props.initialSliderPercentage,\n  (newValue) => {\n    sliderXPercent.value = newValue;\n  },\n);\n\nwatch(\n  () => props.autoplay,\n  (newValue) => {\n    if (newValue && !isMouseOver.value && !isDragging.value) {\n      startAutoplay();\n    } else {\n      stopAutoplay();\n    }\n  },\n);\n</script>\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/compare/StarField.vue",
      "content": "<template>\n  <div class=\"absolute inset-0 overflow-hidden\">\n    <div\n      v-for=\"star in stars\"\n      :key=\"star.id\"\n      :style=\"{\n        top: star.top,\n        left: star.left,\n        width: `${star.size}px`,\n        height: `${star.size}px`,\n        '--inspira-twinkle-duration': `${star.twinkleDuration}s`,\n        '--inspira-drift-duration': `${star.driftDuration}s`,\n        '--inspira-drift-direction': `${star.driftDirection}px`,\n        '--inspira-opacity-start': star.opacityStart,\n        '--inspira-opacity-end': star.opacityEnd,\n      }\"\n      class=\"star absolute rounded-full bg-white\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from \"vue\";\n\ninterface Props {\n  starsCount?: number;\n}\n\ninterface Star {\n  id: number;\n  top: string;\n  left: string;\n  size: number;\n  twinkleDuration: number;\n  driftDuration: number;\n  driftDirection: number;\n  opacityStart: number;\n  opacityEnd: number;\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  starsCount: 130,\n});\n\nfunction random(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n\nfunction randomSize(): number {\n  // Randomly return either 1 or 2\n  return Math.random() < 0.5 ? 1 : 2;\n}\n\nconst stars = computed(() =>\n  Array.from(\n    { length: props.starsCount },\n    (_, i): Star => ({\n      id: i,\n      top: `${random(0, 100)}%`,\n      left: `${random(0, 100)}%`,\n      size: randomSize(),\n      twinkleDuration: random(2, 4),\n      driftDuration: random(5, 10),\n      driftDirection: random(-50, 50),\n      opacityStart: random(0.1, 0.3),\n      opacityEnd: random(0.7, 1),\n    }),\n  ),\n);\n</script>\n\n<style scoped>\n.star {\n  opacity: var(--inspira-opacity-start);\n  animation:\n    twinkle var(--inspira-twinkle-duration) ease-in-out infinite alternate,\n    drift var(--inspira-drift-duration) linear infinite;\n}\n\n@keyframes twinkle {\n  0% {\n    opacity: var(--inspira-opacity-start);\n  }\n  100% {\n    opacity: var(--inspira-opacity-end);\n  }\n}\n\n@keyframes drift {\n  0% {\n    transform: translate(0, 0);\n  }\n  25% {\n    transform: translate(var(--inspira-drift-direction), calc(var(--inspira-drift-direction) / 2));\n  }\n  50% {\n    transform: translate(calc(var(--inspira-drift-direction) / 2), var(--inspira-drift-direction));\n  }\n  75% {\n    transform: translate(\n      calc(var(--inspira-drift-direction) * -1),\n      calc(var(--inspira-drift-direction) / 2)\n    );\n  }\n  100% {\n    transform: translate(0, 0);\n  }\n}\n</style>\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/compare/index.ts",
      "content": "export { default as Compare } from \"./Compare.vue\";\nexport { default as StarField } from \"./StarField.vue\";\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
